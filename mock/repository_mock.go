// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/weBEE9/opt-auth-backend/repository (interfaces: OTPRepository)
//
// Generated by this command:
//
//	mockgen -destination=../mock/repository_mock.go -package=mock github.com/weBEE9/opt-auth-backend/repository OTPRepository
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"
	time "time"

	gomock "go.uber.org/mock/gomock"
)

// MockOTPRepository is a mock of OTPRepository interface.
type MockOTPRepository struct {
	ctrl     *gomock.Controller
	recorder *MockOTPRepositoryMockRecorder
}

// MockOTPRepositoryMockRecorder is the mock recorder for MockOTPRepository.
type MockOTPRepositoryMockRecorder struct {
	mock *MockOTPRepository
}

// NewMockOTPRepository creates a new mock instance.
func NewMockOTPRepository(ctrl *gomock.Controller) *MockOTPRepository {
	mock := &MockOTPRepository{ctrl: ctrl}
	mock.recorder = &MockOTPRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOTPRepository) EXPECT() *MockOTPRepositoryMockRecorder {
	return m.recorder
}

// GenOTP mocks base method.
func (m *MockOTPRepository) GenOTP(arg0 context.Context, arg1 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenOTP", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenOTP indicates an expected call of GenOTP.
func (mr *MockOTPRepositoryMockRecorder) GenOTP(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenOTP", reflect.TypeOf((*MockOTPRepository)(nil).GenOTP), arg0, arg1)
}

// TTL mocks base method.
func (m *MockOTPRepository) TTL(arg0 context.Context, arg1 string) (time.Duration, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TTL", arg0, arg1)
	ret0, _ := ret[0].(time.Duration)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TTL indicates an expected call of TTL.
func (mr *MockOTPRepositoryMockRecorder) TTL(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TTL", reflect.TypeOf((*MockOTPRepository)(nil).TTL), arg0, arg1)
}

// VerifyOTP mocks base method.
func (m *MockOTPRepository) VerifyOTP(arg0 context.Context, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyOTP", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// VerifyOTP indicates an expected call of VerifyOTP.
func (mr *MockOTPRepositoryMockRecorder) VerifyOTP(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyOTP", reflect.TypeOf((*MockOTPRepository)(nil).VerifyOTP), arg0, arg1, arg2)
}
